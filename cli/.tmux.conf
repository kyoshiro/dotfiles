
# !sed -i -e 's/\(.* \# dark\)$/\# \1/' -e 's/\# \(.* \# light\)$/\1/' %

# The goal of the tmux configuration is to make it behave very much like screen + vim
# Plug-ins {{{1
set -g @plugin 'tmux-plugins/tpm'
set -g @update_key 'C-u'

# tmux-open {{{2
set -g @plugin 'tmux-plugins/tmux-open'
set -g @open 'O'
set -g @open-S 'https://www.duckduckgo.com/'

# tmux-sensible {{{2
set -g @plugin 'tmux-plugins/tmux-sensible'
# override prefix definition in tmux-sensible
# workaround in st to use S-Space/S-F1 as a mapping in tmux
set -g prefix C-Space
set-option -g display-time 1000

# switch to last window, use C-Space + C-Space instead of C-Space + Space
bind-key C-Space last-window

# send the C-a prefix to the running application
bind-key Space send-prefix

# tmux-yank {{{2
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @yank_line L

# Clipboard integration requires the xclip or xsel utility!
# This configuration extends tmux-yank plug-in
# Copy tmux paste buffer to CLIPBOARD
# bind-key y run "tmux save-buffer - | perl -pe 'chomp if eof' | xclip -i" \; display-message "Yanked buffer!"
bind-key y run "tmux save-buffer - | perl -pe 'chomp if eof' | xsel -i" \; display-message "Yanked buffer!"
bind-key C-y run "tmux save-buffer - | perl -pe 'chomp if eof' | xsel -i" \; display-message "Yanked buffer!"

# copy current directory to clipboard
bind-key Y run "tmux set-buffer -- '#{pane_current_path}'; tmux display-message -p '#{pane_current_path}' | perl -pe 'chomp if eof' | xsel -i" \; display-message "Yanked directory!"
bind-key C-Y run "tmux set-buffer -- '#{pane_current_path}'; tmux display-message -p '#{pane_current_path}' | perl -pe 'chomp if eof' | xsel -i" \; display-message "Yanked directory!"

# Copy CLIPBOARD to tmux paste buffer and paste tmux paste buffer
# bind-key P run "tmux set-buffer -- \"$(xclip -o)\"; tmux paste-buffer"
bind-key P run "tmux set-buffer -- \"$(xsel -o)\"; tmux paste-buffer"
bind-key C-P run "tmux set-buffer -- \"$(xsel -o)\"; tmux paste-buffer"

# set default terminal to tmux
set -g default-terminal "screen-256color-bce"

# tmx-catppuccin {{{2
# set -g @plugin 'catppuccin/tmux'
# set -g @plugin 'tmux-plugins/tmux-battery'

# tmux-tokyonight {{{2
#set -g @plugin 'fabioluciano/tmux-tokyo-night'

# Don't wait for an escape sequence after seeing C-a.
set -s escape-time 0

# receive focus events
set-option -g focus-events on

# default shell
# set -g default-shell /usr/bin/fish
# set -g default-command /usr/bin/fish

# But don't change tmux's own window titles.
set -w -g automatic-rename off

# initialize plug-ins  {{{2
run '~/.tmux/plugins/tpm/tpm'

# Base configuration {{{1
# set-option -sa terminal-features ',alacritty:RGB'

set-option -sa terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q,alacritty:Tc'

# These characters don't belong to a word
set-option -g word-separators " |│┤├┬┴/\"`'„“«»&()[]{}*,;<>=?@^#:"

# copy the following environment variables into a new tmux session
set-option -ga update-environment ' VMUX_GLOBAL VMUX_EDITOR VMUX_DEBUG'

# Mouse support
set-option -g mouse off

# default key bindings
set-window-option -g mode-keys vi

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
set-window-option -g aggressive-resize on

# start counting windows and panes at one
set -g base-index 0
set -g pane-base-index 0
set -g renumber-windows on

# Set history
set-option -g history-limit 10000

# Status line configuration {{{1

set-option -g status-justify left

set -g status-left-length 20
set -g status-right-length 250

# Visual configuration {{{1

### Tokyo Night Theme configuration
set -g mode-style "fg=#bb9af7,bg=#24283b"

set -g message-style "fg=#bb9af7,bg=#24283b"
set -g message-command-style "fg=#bb9af7,bg=#24283b"

set -g pane-border-style "fg=#24283b"
set -g pane-active-border-style "fg=#bb9af7"

set -g status "on"
set -g status-justify "left"

set -g status-style "fg=#bb9af7,bg=#16161e"

set -g status-left-length "100"
set -g status-right-length "100"

set -g status-left-style NONE
set -g status-right-style NONE
set -g set-titles-string "#S:#I:#W - \"#T\" #{session_alerts}"

set -g status-left "#[fg=#1d202f,bg=#9ece6a,bold] #{session_name} #[fg=#9ece6a,bg=#16161e,nobold,nounderscore,noitalics]"

set -g status-right "#[fg=#16161e,bg=#16161e,nobold,nounderscore,noitalics]#[fg=#bb9af7,bg=#16161e] [#{=21:pane_title}] #[fg=#24283b,bg=#16161e,nobold,nounderscore,noitalics]#[fg=#bb9af7,bg=#24283b] %Y-%m-%d  %I:%M %p #[fg=#7aa2f7,bg=#24283b,nobold,nounderscore,noitalics]#[fg=#1d202f,bg=#7aa2f7,bold] #h "
 if-shell '[ "$(tmux show-option -gqv "clock-mode-style")" == "24" ]' {
  set -g status-right "#[fg=#16161e,bg=#16161e,nobold,nounderscore,noitalics]#[fg=#bb9af7,bg=#16161e] [#{=21:pane_title}] #[fg=#24283b,bg=#16161e,nobold,nounderscore,noitalics]#[fg=#bb9af7,bg=#24283b] %Y-%m-%d  %H:%M #[fg=#7aa2f7,bg=#24283b,nobold,nounderscore,noitalics]#[fg=#1d202f,bg=#7aa2f7,bold] #h "
}

setw -g window-status-activity-style "underscore,fg=#a9b1d6,bg=#16161e"
setw -g window-status-separator ""
setw -g window-status-style "NONE,fg=#a9b1d6,bg=#16161e"
setw -g window-status-format "#[fg=#16161e,bg=#16161e,nobold,nounderscore,noitalics]#[default] #I  #{pane_current_command} #F #[fg=#16161e,bg=#16161e,nobold,nounderscore,noitalics]"
setw -g window-status-current-format "#[fg=#16161e,bg=#24283b,nobold,nounderscore,noitalics]#[fg=#bb9af7,bg=#24283b,bold] #I  #{pane_current_command} #F #[fg=#24283b,bg=#16161e,nobold,nounderscore,noitalics]"

# tmux-plugins/tmux-prefix-highlight support
set -g @prefix_highlight_output_prefix "#[fg=#e0af68]#[bg=#16161e]#[fg=#16161e]#[bg=#e0af68]"
set -g @prefix_highlight_output_suffix ""

### Catppuccin Theme configuration
# set -g @catppuccin_window_right_separator "█ "
# set -g @catppuccin_window_number_position "right"
# set -g @catppuccin_window_middle_separator " | "
#
# set -g @catppuccin_window_default_fill "none"
#
# set -g @catppuccin_window_current_fill "all"
#
# set -g @catppuccin_status_modules_right "application session user host date_time"
# set -g @catppuccin_status_left_separator "█"
# set -g @catppuccin_status_right_separator "█"
#
# set -g @catppuccin_date_time_text "%Y-%m-%d %H:%M:%S"

set-option -g status-fg terminal;

set-window-option -g monitor-activity on
set-window-option -g visual-activity off

set-window-option -g clock-mode-style 24
# set-window-option -g window-status-separator " │ "
set-window-option -g window-status-separator " "

# Key bindings {{{1

# create a new window
bind-key c new-window -a -c '~'
bind-key C new-window -a -c '#{pane_current_path}'
bind-key C-c new-window -c '#{pane_current_path}'

# create a new session
bind-key N command-prompt "new-session -c '#{pane_current_path}' -s '%%'"

# start copy mode
bind-key C-[ copy-mode

# cycling through the window list
bind-key n next-window
bind-key N next-window
# bind-key C-n next-window  # this is set in tmux-sensible

bind-key p previous-window
bind-key P previous-window
# bind-key C-p previous-window  # this is set in tmux-sensible

# detach current session
bind-key d detach
bind-key D detach
bind-key C-d detach

# duplicated session, this time with only 7 bit input
# this is very helpful when it comes to remote ssh sessions that don't handle 8
# bit input too well
# bind-key D run -b "tmux-swap-8bit-input #{session_name}"

# make it easy to move panes between panes and windows
bind-key M command-prompt "move-pane -t '%%'"
bind-key m command-prompt "swap-pane -t '%%'"

# make it easy to move and swap windows
bind-key W command-prompt "move-window -t '%%'"
bind-key w command-prompt "swap-window -t '%%'"

# synchronize panes
bind-key Z set-window-option synchronize-panes

# choose session
bind-key ` choose-session

# move windows
bind-key L swap-window -t :+
bind-key H swap-window -t :-

# swap with master window
bind-key Enter swap-pane -s 0

# move panes
bind-key J swap-pane -t :.+ \; select-pane -t :.+
bind-key K swap-pane -t :.- \; select-pane -t :.-

# Vim behavior for moving, splitting and resizing windows
bind-key v split-window -h -c '#{pane_current_path}'
bind-key V split-window -h -c '#{pane_current_path}'
bind-key C-v split-window -h -p 25 -c '#{pane_current_path}'

bind-key s split-window -v -c '#{pane_current_path}'
bind-key S split-window -v -c '#{pane_current_path}'
bind-key C-s split-window -v -p 25 -c '#{pane_current_path}'

bind-key -r < resize-pane -L
bind-key -r > resize-pane -R
bind-key -r - resize-pane -D
bind-key -r + resize-pane -U
bind-key -r z resize-pane -Z

bind-key C-h select-pane -L
bind-key C-j select-pane -D
bind-key C-k select-pane -U
bind-key C-l select-pane -R

bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# select window from the list of windows
bind-key '"' choose-window

# toggle visibility of status bar
bind-key b run "if [ -z \"$(tmux show-option -v status)\" ] || [ \"$(tmux show-option -v status)\" = 'on' ]; then tmux set-option status off; else tmux set-option status on; fi"

# url/file name selection dialogue
bind-key U run "tmux-fzf-copy-pattern -u"
bind-key u run "tmux-fzf-copy-pattern -U"
bind-key F run "tmux-fzf-copy-pattern -f"
bind-key f run "tmux-fzf-copy-pattern -F"
bind-key F run "tmux-fzf-copy-pattern -f"
bind-key f run "tmux-fzf-copy-pattern -F"
bind-key T run "tmux-fzf-copy-pattern -l"
bind-key t run "tmux-fzf-copy-pattern -L"

# fast way to open a manpage in a new window
bind-key / run "tmux-fzf-man"
# bind-key / command-prompt "split-window -c '#{pane_current_path}' -h 'exec man %%'"

# reload configuration, tmux-sensible C-Space + R

# File explorer {{{2
bind-key e split-window -b -c '#{pane_current_path}' -l 45 -h 'fish -c ranger'
bind-key E split-window -b -c '#{pane_current_path}' -l 45 -h 'fish -c ranger'
bind-key C-e split-window -c '#{pane_current_path}' -p 30 -v 'fish -c ranger'
bind-key C-E split-window -c '#{pane_current_path}' -p 30 -v 'fish -c ranger'

# git integration {{{2
bind-key g split-window -c '#{pane_current_path}' -p 50 -h 'fish -c gitsh'
bind-key G split-window -c '#{pane_current_path}' -p 50 -h 'fish -c tig'
bind-key C-g split-window -c '#{pane_current_path}' -p 50 -v 'fish -c gitsh'
bind-key C-G split-window -c '#{pane_current_path}' -p 50 -v 'fish -c tig'

# Search back to last prompt (mnemonic: "[b]ack"); searches for non-breaking
# space in prompt.

# bind-key a copy-mode\; send-keys -X start-of-line\; send-keys -X search-backward " "

bind-key -T copy-mode-vi v send-keys -X begin-selection

# vi: ft=tmux:tw=400:sw=4:ts=4:sts=4:et:fdm=marker
